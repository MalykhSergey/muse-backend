CREATE TYPE post_type AS ENUM ('QUESTION', 'ANSWER');
CREATE TYPE vote_type AS ENUM ('POSITIVE', 'NEGATIVE');
CREATE TYPE user_type AS ENUM ('EXTERNAL', 'INTERNAL');


-- Таблица пользователей
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_type user_type NOT NULL,
    internal_id UUID UNIQUE,
    external_id BIGINT UNIQUE,
    name VARCHAR(255),
    CHECK (
        (user_type = 'INTERNAL' AND internal_id IS NOT NULL AND external_id IS NULL) OR
        (user_type = 'EXTERNAL' AND external_id IS NOT NULL AND internal_id IS NULL)
    )
);

-- Таблица постов
CREATE TABLE posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255),
    body TEXT,
    post_type post_type,
    author_id BIGINT REFERENCES users(id),
    parent_id BIGINT REFERENCES posts(id) ON DELETE SET NULL,
    answer_id BIGINT REFERENCES posts(id) ON DELETE SET NULL,
    created TIMESTAMP,
    updated TIMESTAMP,
    search_vector tsvector
        GENERATED ALWAYS AS (
          setweight(to_tsvector('english', coalesce(title,'')), 'A') ||
          setweight(to_tsvector('english', coalesce(body,'')),  'B') ||
          setweight(to_tsvector('russian',  coalesce(title,'')), 'A') ||
          setweight(to_tsvector('russian',  coalesce(body,'')),  'B')
        ) STORED
);

-- Таблица комментариев
CREATE TABLE comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    body TEXT,
    author_id BIGINT REFERENCES users(id) ON DELETE SET NULL,
    post_id BIGINT REFERENCES posts(id) ON DELETE CASCADE NOT NULL ,
    created TIMESTAMP,
    updated TIMESTAMP
);

-- Таблица голосов
CREATE TABLE votes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    author_id BIGINT REFERENCES users(id),
    post_id BIGINT REFERENCES posts(id)  NOT NULL,
    created TIMESTAMP  NOT NULL,
    type vote_type
);

-- Таблица тегов
CREATE TABLE tags (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL,
    post_id BIGINT REFERENCES posts(id)
);
-- Таблица связей тегов и постов
CREATE TABLE posts_tags (
    post_id BIGINT REFERENCES posts(id) NOT NULL,
    tag_id BIGINT REFERENCES tags(id) NOT NULL,
    PRIMARY KEY (post_id, tag_id)
);

-- Таблица подписок на посты
CREATE TABLE posts_subscribes (
    post_id BIGINT REFERENCES posts(id) ON DELETE CASCADE NOT NULL,
    user_id BIGINT REFERENCES users(id) ON DELETE CASCADE NOT NULL,
    PRIMARY KEY (post_id, user_id)
);

-- Таблица подписок на теги
CREATE TABLE tags_subscribes (
    tag_id BIGINT REFERENCES tags(id) ON DELETE CASCADE NOT NULL,
    user_id BIGINT REFERENCES users(id) ON DELETE CASCADE NOT NULL ,
    PRIMARY KEY (tag_id, user_id)
);
